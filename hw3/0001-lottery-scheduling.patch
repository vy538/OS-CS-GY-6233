From fbb80b85fc7633434e34cd5b2b35bbeb2d50cdfc Mon Sep 17 00:00:00 2001
From: vy538 <good5538@gmail.com>
Date: Wed, 13 Nov 2019 14:24:48 -0500
Subject: [PATCH 1/2] =lottery scheduling

---
 Makefile  |  1 +
 proc.c    | 37 +++++++++++++++++++++++++++++++++++++
 proc.h    |  2 ++
 syscall.c |  2 ++
 syscall.h |  1 +
 sysproc.c | 10 ++++++++++
 user.h    |  1 +
 usys.S    |  1 +
 8 files changed, 55 insertions(+)

diff --git a/Makefile b/Makefile
index 5d91068..7d17a81 100644
--- a/Makefile
+++ b/Makefile
@@ -174,6 +174,7 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_hackbench\
+	_lotterytest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/proc.c b/proc.c
index b122e3b..53843f5 100644
--- a/proc.c
+++ b/proc.c
@@ -50,6 +50,9 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  //tickets start
+  p->tickets = 20;
+  //tickets end
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -257,6 +260,27 @@ wait(void)
   }
 }
 
+//get current total lottery
+int
+getTotalLottery(void){
+struct proc *p;
+int tickets_sum = 0;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state == RUNNABLE){
+      tickets_sum += p->tickets;
+    }
+  };
+  return tickets_sum;
+};
+
+void
+setTickets(struct proc* cp, int ticN){
+  acquire(&ptable.lock);
+  cp->tickets = ticN;
+  release(&ptable.lock);
+}
+
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
@@ -280,10 +304,23 @@ scheduler(void)
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+    // lottery code
+    int total_tickets = getTotalLottery();
+    int winning_ticket = random_at_most(total_tickets);
+    int current = 0;
+    //
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
 
+      //lottery
+      current += p->tickets;
+      if(current<winning_ticket){
+        continue;
+      }
+      //
+
+
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
diff --git a/proc.h b/proc.h
index 3b9c3ac..f8cb2c1 100644
--- a/proc.h
+++ b/proc.h
@@ -66,8 +66,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;                 //lottery ticket
 };
 
+void setTickets(struct proc* cp, int ticN);
 // Process memory is laid out contiguously, low addresses first:
 //   text
 //   original data and bss
diff --git a/syscall.c b/syscall.c
index 0e06ad4..04092fb 100644
--- a/syscall.c
+++ b/syscall.c
@@ -99,6 +99,7 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_gettime(void);
+extern int sys_settickets(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -123,6 +124,7 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_gettime] sys_gettime,
+[SYS_settickets]  sys_settickets
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 6d6c224..e59bc4a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_gettime 22
+#define SYS_settickets 23
diff --git a/sysproc.c b/sysproc.c
index ddaed7c..b46f2e7 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -8,6 +8,16 @@
 #include "proc.h"
 
 int
+sys_settickets(void)
+{
+  int number;
+  if(argint(0,&number)<0)
+    return -1;
+  setTickets(proc,number);
+  return 0;
+}
+
+int
 sys_fork(void)
 {
   return fork();
diff --git a/user.h b/user.h
index 46d1059..58e344c 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int gettime(struct rtcdate *);
+int settickets(int);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index e556d66..27646a9 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(gettime)
+SYSCALL(settickets)
-- 
1.9.1

